#########################
# Django 4 using pip
##########################
# Container configuration.

#   The name of this app. Must be unique within a project.
name: 'app'

#   The runtime the application uses.
type: 'python:3.10'

##########################
# Build and deploy

hooks:
    build: |
        set -eu

        # Download the latest version of pip
        python3.10 -m pip install --upgrade pip

        # Install dependencies
        pip install -r requirements.txt

        # Collect static assets
        python manage.py collectstatic

    deploy: python manage.py migrate

##########################
# Web configuration

# The configuration of the application when it is exposed to the web.
web:
    upstream:
        socket_family: unix
    commands:
        start: "gunicorn -w 4 -b unix:$SOCKET bigfoot_django.wsgi:application"
    locations:
        "/":
            passthru: true
        "/static":
            root: "static"
            expires: 1h
            allow: true

##########################
# Services

# The relationships of the application with services or other applications.
#
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form `<service name>:<endpoint name>`.
relationships:
    database: "db:postgresql"

##########################
# Data and mounts

# The size of the persistent disk of the application (in MB).
disk: 512

# Set a local R/W mount for logs
mounts:
    'logs':
        source: local
        source_path: logs





# name: app
# type: 'python:3.10'
# dependencies:
#     python3:
#         pip: 22.2.2
#         pipenv: 2022.8.19
# hooks:
#     build: |
#         set -e
#         mkdir logs
#         pipenv install --system --deploy
#         python manage.py collectstatic
#         ls -a static
#     deploy: |
#         python manage.py migrate
#         # python manage.py generate_fake_data
# relationships:
#     database: 'dbpostgres:postgresql'
# web:
#     upstream:
#         socket_family: unix
#     commands:
#         start: 'gunicorn -w 4 -b unix:/run/app.sock bigfoot_django.wsgi:application'
#     locations:
#         /:
#             passthru: true
#         /static:
#             root: static
#             expires: 1h
#             allow: true
# disk: 512
# mounts:
#     logs:
#         source: local
#         source_path: logs
